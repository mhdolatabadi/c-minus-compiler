
// newer version format
Program Declarationlist $
Declarationlist Declaration Declarationlist 
Declaration Declarationinitial Declarationprime
Declarationinitial Typespecifier ID
Declarationprime Fundeclarationprime 
Declarationprime Vardeclarationprime
Vardeclarationprime ; 
Vardeclarationprime [ NUM ] ; 
Fundeclarationprime ( Params ) Compoundstmt
Typespecifier int 
Typespecifier void
Params int ID Paramprime Paramlist 
Params void
Paramlist , Param Paramlist 
Paramlist  
Param Declarationinitial Paramprime
Paramprime [  ] 
Paramprime  
Compoundstmt { Declarationlist Statementlist }
Statementlist Statement Statementlist 
Statementlist  
Statement Expressionstmt 
Statement Compoundstmt 
Statement Selectionstmt 
Statement Iterationstmt 
Statement Returnstmt
Expressionstmt Expression ; 
Expressionstmt break ; 
Expressionstmt ;
Selectionstmt if ( Expression ) Statement Elsestmt
Elsestmt endif 
Elsestmt else Statement endif
Iterationstmt repeat Statement until ( Expression ) 
Returnstmt return Returnstmtprime
Returnstmtprime ; 
Returnstmtprime Expression ;
Expression Simpleexpressionzegond 
Expression ID B
B = Expression 
B [ Expression ] H 
B Simpleexpressionprime
H = Expression 
H G D C
Simpleexpressionzegond Additiveexpressionzegond C
Simpleexpressionprime Additiveexpressionprime C
C Relop Additiveexpression 
C  
Relop < 
Relop ==
Additiveexpression Term D
Additiveexpressionprime Termprime D
Additiveexpressionzegond Termzegond D
D Addop Term D 
D  
Addop + 
Addop -
Term Factor G
Termprime Factorprime G
Termzegond Factorzegond G
G * Factor G 
G  
Factor ( Expression ) 
Factor ID Varcallprime 
Factor NUM
Varcallprime ( Args ) 
Varcallprime Varprime
Varprime [ Expression ] 
Varprime  
Factorprime ( Args ) 
Factorprime  
Factorzegond ( Expression ) 
Factorzegond NUM
Args Arglist 
Args  
Arglist Expression Arglistprime
Arglistprime , Expression Arglistprime 
Arglistprime  

// older version format
Program -> Declarationlist $
Declarationlist -> Declaration Declarationlist | EPSILON 
Declaration -> Declarationinitial Declarationprime
Declarationinitial ->  Typespecifier ID
Declarationprime -> Fundeclarationprime | Vardeclarationprime
Vardeclarationprime -> ; | [ NUM ] ; 
Fundeclarationprime ->  ( Params ) Compoundstmt
Typespecifier -> int | void
Params -> int ID Paramprime Paramlist | void
Paramlist -> , Param Paramlist | EPSILON
Param -> Declarationinitial Paramprime
Paramprime -> [  ] | EPSILON
Compoundstmt -> { Declarationlist Statementlist }
Statementlist -> Statement Statementlist | EPSILON
Statement -> Expressionstmt | Compoundstmt | Selectionstmt | Iterationstmt | Returnstmt
Expressionstmt -> Expression ; | break ; | ;
Selectionstmt -> if ( Expression ) Statement Elsestmt
Elsestmt -> endif | else Statement endif
Iterationstmt -> repeat Statement until ( Expression ) 
Returnstmt -> return Returnstmtprime
Returnstmtprime -> ; | Expression ;
Expression -> Simpleexpressionzegond | ID B
B -> = Expression | [ Expression ] H | Simpleexpressionprime
H -> = Expression | G D C
Simpleexpressionzegond -> Additiveexpressionzegond C
Simpleexpressionprime -> Additiveexpressionprime C
C -> Relop Additiveexpression | EPSILON
Relop -> < | ==
Additiveexpression -> Term D
Additiveexpressionprime -> Termprime D
Additiveexpressionzegond -> Termzegond D
D -> Addop Term D | EPSILON
Addop -> + | -
Term -> Factor G
Termprime -> Factorprime G
Termzegond -> Factorzegond G
G -> * Factor G | EPSILON
Factor -> ( Expression ) | ID Varcallprime | NUM
Varcallprime -> ( Args ) | Varprime
Varprime -> [ Expression ] | EPSILON
Factorprime -> ( Args ) | EPSILON
Factorzegond -> ( Expression ) | NUM
Args -> Arglist | EPSILON
Arglist -> Expression Arglistprime
Arglistprime -> , Expression Arglistprime | EPSILON