Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->  Type-specifier #pid ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> #declare_id ; | [ #pnum NUM ] #declare_arr ; 
Fun-declaration-prime ->  #declare_func ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int #pid ID Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [  ] #declare_array_parameter | EPSILON #declare_id_parameter
Compound-stmt -> { #scope_start Declaration-list Statement-list #scope_end} 
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | break ; | ;
Selection-stmt -> if ( Expression #jpf_if) Statement  Else-stmt
Else-stmt -> #jpf_save_if endif | else #jpf_save_if Statement endif #jp_save_if
Iteration-stmt -> repeat #label Statement until ( Expression #jpf ) 
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | #pid ID B
B -> = Expression #assign | [ Expression ] H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #exec_op | EPSILON
Relop -> #push_op < | #push_op ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #exec_op D | EPSILON
Addop -> #push_op + | #push_op - 
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> #push_op * Factor #exec_op G | EPSILON
Factor -> ( Expression ) | #pid ID Var-call-prime | #pnum NUM
Var-call-prime -> ( Args ) #call_func | Var-prime
Var-prime -> [ Expression ] | EPSILON
Factor-prime -> ( Args ) | EPSILON
Factor-zegond -> ( Expression ) | #pnum NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON
